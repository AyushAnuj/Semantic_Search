Builder Design Pattern:

. Builder Pattern says that "construct a complex object from simple objects using step-by-step approach".
. It aims to “Separate the construction of a complex object from its representation so that the same construction process can create different representations.” 
.  The process of constructing an object should be generic so that it can be used to create different representations of the same object.

. Condition:
	. Make Main Class constructor as private.
	. create a static builder calss inside the Main class.
	. create a public build() method inside builder class which will create the Main class and return.
	. All getter of the Main class variable will only present inside Main class.
	. All setter will be inside Builder class and it will return Builder class always.



. Advantage:
	. It provides clear separation between the construction and representation of an object.
	. It provides better control over construction process.
	. It is thread safe.
	. It supports to change the internal representation of objects.
	. Please note that above created user object does not have any setter method, so it’s state can not be changed once it has been built. This provides the desired immutability.
	. Object is always instantiated in a complete state rather than sitting in an incomplete state until the developer calls (if ever calls) the appropriate “setter” method to set additional fields.
	. We can build immutable objects without much complex logic in object building process.



. Example:
	. public class User{
		private final String firstName; // required
	    private final String lastName; // required
	    private final int age; // optional
	    private final String phone; // optional
	    private final String address; // optional

	    private User(UserBuilder builder) {
	        this.firstName = builder.firstName;
	        this.lastName = builder.lastName;
	        this.age = builder.age;
	        this.phone = builder.phone;
	        this.address = builder.address;
    	}

    	public String getFirstName() {
	        return firstName;
	    }
	    public String getLastName() {
	        return lastName;
	    }
	    public int getAge() {
	        return age;
	    }
	    public String getPhone() {
	        return phone;
	    }
	    public String getAddress() {
	        return address;
	    }

	    @Override
	    public String toString() {
	        return "User: "+this.firstName+", "+this.lastName+", "+this.age+", "+this.phone+", "+this.address;
	    }

	    public static class UserBuilder
	    {
	        private final String firstName;
	        private final String lastName;
	        private int age;
	        private String phone;
	        private String address;
	 
	        public UserBuilder(String firstName, String lastName) {
	            this.firstName = firstName;
	            this.lastName = lastName;
	        }
	        public UserBuilder age(int age) {
	            this.age = age;
	            return this;
	        }
	        public UserBuilder phone(String phone) {
	            this.phone = phone;
	            return this;
	        }
	        public UserBuilder address(String address) {
	            this.address = address;
	            return this;
	        }
	        
	        //Return the finally consrcuted User object
	        public User build() {
	            User user =  new User(this);
	            validateUserObject(user);
	            return user;
	        }
	        private void validateUserObject(User user) {
	            //Do some basic validations to check
	            //if user object does not break any assumption of system
	        }
	    }


	    public static void main(String[] args) {
		    User user1 = new User.UserBuilder("Lokesh", "Gupta")
		    .age(30)
		    .phone("1234567")
		    .address("Fake address 1234")
		    .build();
		 
		    System.out.println(user1);
		 
		    User user2 = new User.UserBuilder("Jack", "Reacher")
		    .age(40)
		    .phone("5655")
		    //no address
		    .build();
		 
		    System.out.println(user2);
		 
		    User user3 = new User.UserBuilder("Super", "Man")
		    //No age
		    //No phone
		    //no address
		    .build();
		 
		    System.out.println(user3);
		}
	}
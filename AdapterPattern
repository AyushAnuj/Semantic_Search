Adapter Pattern:
. Converts the interface of a class into another interface that a client wants
. The Adapter Pattern is also known as Wrapper.
. An Adapter pattern acts as a connector between two incompatible interfaces that otherwise cannot be connected directly.
. The main motive behind using this pattern is to convert an existing interface into another interface that the client expects. It’s usually implemented once the application is designed.
. The adapter pattern is often used to make existing classes work with others without modifying their source code.
. Adapter patterns use a single class (the adapter class) to join functionalities of independent or incompatible interfaces/classes.


. Advantage:
	. It allows two or more previously incompatible objects to interact.
	. It allows reusability of existing functionality.

. Used:
	. When an object needs to utilize an existing class with an incompatible interface.
	. When an outside component provides captivating functionality that we’d like to reuse, but it’s incompatible with our current application. A suitable Adapter can be developed to make them compatible with each other
	. When our application is not compatible with the interface that our client is expecting
	. When we want to reuse legacy code in our application without making any modification in the original code.
	. 



Model:
	. Target Interface: This is the desired interface class which will be used by the clients.
	
	. Adapter class: This class is a wrapper class which implements the desired target interface and modifies the specific request available from the Adaptee class.
	
	. Adaptee class: This is the class which is used by the Adapter class to reuse the existing functionality and modify them for desired use.

	. Client: This class will interact with the Adapter class.

